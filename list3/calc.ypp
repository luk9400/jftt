%{
  #define YYSTYPE int

  #include <stdio.h>
  #include <math.h>
  #include <string>

  using namespace std;

  int yylex();
  int yyerror(string);
  extern int yylineno;

  int divide(int a, int b) {
    return floor((double) a / (double) b);
  }

  int modulo(int a, int b) {
    return a - divide(a, b) * b;
  }

  string rpn = "";
  int error = 0;
%}

%token NUM
%token LBRACKET
%token RBRACKET

%left PLUS MINUS
%left MULT DIV MOD
%right POW
%precedence NEG

%token END
%token ERROR

%% /* Grammar rules and actions follow. */

input:
  %empty
| input line
;

line:   expr END {
                    if (!error) {
                        printf("%s\n= %d\n", rpn.c_str(), $$);
                    }
                    error = 0;
                    rpn = "";

                }
        | error END {
                        printf("Błąd w linii %d\n", yylineno - 1);
                        error = 1;
                        rpn = "";
        }
;

expr:
    NUM                         { rpn += to_string($1) + " "; $$ = $1; }
    | expr PLUS expr            { rpn += "+ "; $$ = $1 + $3; }
    | expr MINUS expr           { rpn += "- "; $$ = $1 - $3; }
    | expr MULT expr            { rpn += "* "; $$ = $1 * $3; }
    | expr DIV expr             { rpn += "/ ";
                                  if ($3 == 0) {
                                      yyerror("Nie dzielimy przez 0");
                                  } else {
                                      $$ = divide($1, $3);
                                  } 
                                }
    | expr MOD expr             { rpn += "% ";
                                  if ($3 == 0) {
                                      yyerror("Nie modulujemy przez 0");
                                  } else {
                                      $$ = modulo($1, $3);
                                  } 
                                }
    | MINUS NUM %prec NEG      { rpn += "-" + to_string($2) + " "; $$ = -$2; }
    | expr POW expr             { rpn += "^ "; $$ = pow($1, $3); }
    | LBRACKET expr RBRACKET    { $$ = $2; }
;

%%

int yyerror(string str) {
    error = 1;
    printf("%s\n", rpn.c_str());
    printf("%s\n", str.c_str());
    return 0;
}

int main () {
  //printf("%d\n", -4%3);
  return yyparse();
}